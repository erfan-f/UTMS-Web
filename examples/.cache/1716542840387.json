{"date":"2024-05-24T09:27:18.824Z","courseId":"17","assignment":"AP-Spring03-CA6","trace":{"content":"#include \"Get_method.hpp\"\n\nGet::Get(std::string t , std::vector <std::string> cmds)\n:Method(t,cmds) {}\n\nvoid Get::Process_Cmd(std::string cmd_line ,std::vector<Major*> &majors ,std::vector<Unit*> &units ,std::vector<User*> &users ,std::vector<Course*> &courses, User **current_user,std::vector<std::string> &response)\n{\n\tstd::stringstream S(cmd_line);\n\n\tstd::string temp_str,command;\n\n\tS >> temp_str >> command >> temp_str;\n\n\tif(command == USER_CMD_TYPE_3)\n\t{\n\t\tstd::string id_argument,id,garbage_string;\n\t\tS >> id_argument >> id >> garbage_string;\n\t\tif(id_argument == \"\")\n\t\t{\n\t\t\tget_All_Courses_Info(courses,response);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(id_argument != CMD_ARGUMENT_1 || id == \"\")\n\t\t\t\tthrow ArgumentException(ERROR_1);\n\n\t\t\tif(!is_Number(id))\n            \tthrow ArgumentException(ERROR_1);\n\n\t\t\tif(std::stoll(id) <= 0)\n\t\t\t\tthrow ArgumentException(ERROR_1);\n\t\t\tif(garbage_string != \"\")\n\t\t\t\tthrow ArgumentException(ERROR_1);\n\n\t\t\tget_Course_Info(courses,id,response);\n\t\t}\n\t}\n\telse if(command == USER_CMD_TYPE_4)\n\t{\n\t\tif(dynamic_cast<SystemOperator*>(*current_user) != NULL)\n\t\t\tthrow AcessibilityException(ERROR_3);\n\t\tstd::string argument_1,argument_2,input_1,input_2,garbage_string;\n\t\tstd::string id,post_id;\n\t\tS >> argument_1 >> input_1 >> argument_2 >> input_2 >> garbage_string;\n\t\tif((argument_1 == CMD_ARGUMENT_1 || argument_1 == CMD_ARGUMENT_3 ) && (argument_2 == CMD_ARGUMENT_1 || argument_2 == CMD_ARGUMENT_3))\n\t\t{\n\t\t\tif(argument_1 == CMD_ARGUMENT_1)\n\t\t\t{\n\t\t\t\tid = input_1;\n\t\t\t\tpost_id = input_2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tid = input_2;\n\t\t\t\tpost_id = input_1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tthrow ArgumentException(ERROR_1);\n\n\t\tif(!is_Number(id) || !is_Number(post_id))\n            throw ArgumentException(ERROR_1);\n\n\t\tif(std::stoll(id) <0 || std::stoll(post_id) <=0)\n\t\t\tthrow ArgumentException(ERROR_1);\n\t\t\n\t\tif(garbage_string != \"\")\n\t\t\tthrow ArgumentException(ERROR_1);\n\n\t\tget_User_Post(users,id,post_id,response);\n\t}\n\telse if(command == USER_CMD_TYPE_5)\n\t{\n\t\tstd::string id_argument,id,garbage_string;\n\t\tS >> id_argument >> id >> garbage_string;\n\t\tif(id_argument != CMD_ARGUMENT_1 || id == \"\")\n\t\t\tthrow ArgumentException(ERROR_1);\n\n\t\tif(!is_Number(id))\n            throw ArgumentException(ERROR_1);\n\t\tif(std::stoll(id) < 0)\n\t\t\tthrow ArgumentException(ERROR_1);\n\t\tif(garbage_string != \"\")\n\t\t\tthrow ArgumentException(ERROR_1);\n\n\t\tget_Personal_Page(users,id,response);\n\t}\n\telse if(command == USER_CMD_TYPE_7)\n\t{\n\t\tstd::string argument_str;\n\t\tS >> argument_str;\n\t\t\n\t\tif(argument_str != \"\")\n\t\t\tthrow ArgumentException(ERROR_1);\n\t\t\n\t\tresponse.push_back((*current_user)->get_Notifications());\n\t}\n\telse if(command == USER_CMD_TYPE_9)\n\t{\n\t\tstd::string argument_str;\n\t\tS >> argument_str;\n\t\tif(argument_str != \"\")\n\t\t\tthrow ArgumentException(ERROR_1);\n\n\t\tStudent *student = dynamic_cast<Student*>(*current_user);\n\t\tif(student == NULL)\n            throw AcessibilityException(ERROR_3);\n\n\t\tresponse.push_back(student->get_Courses_Info());\n\t}\n}\n\n\nvoid Get::get_All_Courses_Info(std::vector<Course*> courses , std::vector<std::string> &response)\n{\t\n\tif(courses.size() == 0)\n\t\tthrow CommandException(ERROR_4);\n\n\tfor(int i=0 ; i<courses.size(); i++)\n\t{\n\t\tresponse.push_back(courses[i]->get_Info());\n\t}\n\t\n}\n\nvoid Get::get_Course_Info(std::vector<Course*> courses , std::string course_id,std::vector<std::string> &response)\n{\n\tCourse *target_course = Find_Course(courses,course_id);\n\t\n\tresponse.push_back(target_course->get_All_Info());\n}\n\n\nvoid Get::get_Personal_Page(std::vector<User*> users,std::string user_id,std::vector<std::string> &response)\n{\n\tUser *user = Find_User(users,user_id);\n\n\tresponse.push_back(user->get_Page_Info());\n}\n\nvoid Get::get_User_Post(std::vector<User*> users,std::string user_id,std::string post_id,std::vector<std::string> &response)\n{\n\tUser *user = Find_User(users,user_id);\n\t\n\tresponse.push_back(user->get_Post(post_id));\n}\n","filename":"/home/erfan/Desktop/Project6/A6_1/Get_method.cpp","identifier":"Save Document","languageId":"cpp","version":91,"lineCount":147},"failed":false}
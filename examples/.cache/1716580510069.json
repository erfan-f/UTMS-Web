{"date":"2024-05-24T19:55:08.958Z","courseId":"17","assignment":"AP-Spring03-CA6","trace":{"content":"#include \"SystemController.hpp\"\n\nSystemController::SystemController()\n{\n\tusers.push_back(new SystemOperator(OPERATOR_NAME,OPERATOR_ID,OPERATOR_PASSWORD));\n\n\tmethods.push_back(new Post(METHOD_1,{USER_CMD_TYPE_1,USER_CMD_TYPE_2,USER_CMD_TYPE_6,USER_CMD_TYPE_4,USER_CMD_TYPE_8}));\n\tmethods.push_back(new Get(METHOD_2,{USER_CMD_TYPE_3,USER_CMD_TYPE_5,USER_CMD_TYPE_4,USER_CMD_TYPE_7,USER_CMD_TYPE_9}));\n\tmethods.push_back(new Put(METHOD_3,{USER_CMD_TYPE_9}));\n\tmethods.push_back(new Delete(METHOD_4,{USER_CMD_TYPE_4,USER_CMD_TYPE_9}));\n\n}\n\n\nvoid SystemController::Read_Majors(std::string file_path)\n{\n\tstd::string  name,id;\n\n\tstd::fstream fin;\n\tfin.open(file_path,std::ios::in);\n\n\tstd::string temp_str;\n\tgetline(fin,temp_str);\n\n\twhile(getline(fin,temp_str))\n\t{\n\t\tstd::stringstream S(temp_str);\n\t\tgetline(S,id,SEPRATOR);\n\t\tgetline(S,name,SEPRATOR);\n\n\t\tAdd_Major(name,id);\n\t}\n\n}\n\nvoid SystemController::Read_Units(std::string file_path)\n{\n\tstd::string  name,id,credit,prerequisite,majors_id_str;\n\tstd::vector<std::string> majors_id;\n\n\tstd::fstream fin;\n\tfin.open(file_path,std::ios::in);\n\n\tstd::string temp_str;\n\tgetline(fin,temp_str);\n\n\twhile(getline(fin,temp_str))\n\t{\n\t\tstd::stringstream S(temp_str);\n\t\tgetline(S,id,SEPRATOR);\n\t\tgetline(S,name,SEPRATOR);\n\t\tgetline(S,credit,SEPRATOR);\n\t\tgetline(S,prerequisite,SEPRATOR);\n\t\tgetline(S,majors_id_str,SEPRATOR);\n\n\t\tstd::stringstream S2(majors_id_str);\n\t\twhile(getline(S2,temp_str,IN_LINE_SEPRATOR))\n\t\t{\n\t\t\tmajors_id.push_back(temp_str);\n\t\t}\n\n\t\tAdd_Unit(name,id,std::stoll(credit),prerequisite,majors_id);\n\t\tmajors_id.clear();\n\t}\n}\n\nvoid SystemController::Read_Professor(std::string file_path)\n{\n\n\tstd::string  name,id,major,major_id,position,password;\n\n\tstd::fstream fin;\n\tfin.open(file_path,std::ios::in);\n\n\tstd::string temp_str;\n\tgetline(fin,temp_str);\n\n\twhile(getline(fin,temp_str))\n\t{\n\t\tstd::stringstream S(temp_str);\n\t\tgetline(S,id,SEPRATOR);\n\t\tgetline(S,name,SEPRATOR);\n\t\tgetline(S,major_id,SEPRATOR);\n\t\tgetline(S,position,SEPRATOR);\n\t\tgetline(S,password,SEPRATOR);\n\n\t\tmajor = Specify_Major(major_id);\n\n\t\tAdd_Professor(name,id,major,major_id,position,password);\n\t}\n}\n\nvoid SystemController::Read_Student(std::string file_path)\n{\n\n\tstd::string  name,id,major,major_id,semester,password;\n\n\tstd::fstream fin;\n\tfin.open(file_path,std::ios::in);\n\n\tstd::string temp_str;\n\tgetline(fin,temp_str);\n\n\twhile(getline(fin,temp_str))\n\t{\n\t\tstd::stringstream S(temp_str);\n\t\tgetline(S,id,SEPRATOR);\n\t\tgetline(S,name,SEPRATOR);\n\t\tgetline(S,major_id,SEPRATOR);\n\t\tgetline(S,semester,SEPRATOR);\n\t\tgetline(S,password,SEPRATOR);\n\n\t\tmajor = Specify_Major(major_id);\n\t\t\n\t\tAdd_Student(name,id,major,major_id,semester,password);\n\t}\n}\n\n\n\nvoid SystemController::Add_Major(std::string name,std::string id)\n{\n\tMajor *m = new Major(name,id);\n\tmajors.push_back(m);\n}\n\nvoid SystemController::Add_Unit(std::string name,std::string id,int credit,std::string prerequisite,std::vector<std::string> majors_id)\n{\n\tUnit *u = new Unit(name,id,credit,prerequisite,majors_id);\n\tunits.push_back(u);\n}\n\nvoid SystemController::Add_Professor(std::string name,std::string id,std::string major,std::string major_id,std::string position,std::string password)\n{\n\tProfessor *p = new Professor(name,id,major,major_id,position,password);\n\tusers.push_back(p);\n}\n\nvoid SystemController::Add_Student(std::string name,std::string id,std::string major,std::string major_id,std::string semester,std::string password)\n{\n\tStudent *s = new Student(name,id,major,major_id,semester,password);\n\tusers.push_back(s);\n}\n\nvoid SystemController::Handle_Cmd(std::string cmd_line,std::vector<std::string> &response)\n{\n\tstd::stringstream S(cmd_line);\n\n\tstd::string method_type , command , operator_argument;\n\n\tS >> method_type;\n\tS >> command;\n\tS >> operator_argument;\n\n\tMethod *method = Specify_Method(method_type);\n\t\n\n\tif(!method->is_Cmd_Valid(command))\n\t{\n\t\tthrow CommandException(ERROR_2);\n\t}\n\tif(operator_argument != OPERATOR_ARGUMANT)\n\t\tthrow CommandException(ERROR_1);\n\n\tif(command == USER_CMD_TYPE_1 )\n\t{\n\t\tif(current_user != NULL)\n\t\t\tthrow AcessibilityException(ERROR_3);\n\n\t\tmethod->Process_Cmd(cmd_line,majors,units,users,courses,&current_user,response);\n\n\t}\n\telse\n\t{\n\t\tif(current_user == NULL)\n\t\t\tthrow AcessibilityException(ERROR_3);\n\t\t\n\t\tif(current_user->Permision_Check(command))\n\t\t\tmethod->Process_Cmd(cmd_line,majors,units,users,courses,&current_user,response);\n\t\telse\t\n\t\t\tthrow AcessibilityException(ERROR_3);\n\t}\n\t\n}\n\nMethod* SystemController::Specify_Method(std::string method_type)\n{\n\tfor(int i=0 ; i<methods.size() ; i++)\n\t{\n\t\tif(methods[i]->is_Equal(method_type))\n\t\t{\n\t\t\treturn methods[i];\n\t\t}\n\t}\n\tthrow MethodException(ERROR_1);\n}\n\nstd::string SystemController::Specify_Major(std::string id)\n{\n\n\tstd::string major;\n\tfor(int i=0 ; i<majors.size() ; i++)\n\t{\n\t\tif(majors[i]->is_Valid_Id(id))\n\t\t{\n\t\t\tmajor = majors[i]->get_Name();\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn major;\n}\n\nvoid SystemController::Connect_To_All_User()\n{\n\tfor(int i=1 ; i<users.size() ; i++)\n\t{\n\t\tusers[i]->Connect(users[0]);\n\t\tusers[0]->Connect(users[i]);\n\t}\n}\n\nvoid SystemController::Free_Allocated_Memory()\n{\n\tfor(int i=0 ; i<users.size() ; i++)\n\t{\n\t\tusers[]\n\t\tdelete users[i];\n\n\t}\n\tfor(int i=0 ; i<majors.size() ; i++)\n\t\tdelete majors[i];\n\tfor(int i=0 ; i<units.size() ; i++)\n\t\tdelete units[i];\n\tfor(int i=0 ; i<courses.size() ; i++)\n\t\tdelete courses[i];\n\tfor(int i=0 ; i<methods[i].size() ; i++)\n\t\tdelete methods[i];\n}\n","filename":"/home/erfan/Desktop/Project6/A6_1/SystemController.cpp","identifier":"Save Document","languageId":"cpp","version":253,"lineCount":239},"failed":false}
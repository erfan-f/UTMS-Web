{"date":"2024-05-22T18:59:30.181Z","courseId":"17","assignment":"AP-Spring03-CA6","trace":{"version":2,"content":"#include \"Get_method.hpp\"\n\nGet::Get(std::string t , std::vector <std::string> cmds)\n:Method(t,cmds) {}\n\nstd::vector<std::string> Get::Process_Cmd(std::string cmd_line ,std::vector<Major*> &majors ,std::vector<Unit*> &units ,std::vector<User*> &users ,std::vector<Course*> &courses, User **current_user)\n{\n\tstd::stringstream S(cmd_line);\n\n\tstd::string temp_str,command;\n\n\tS >> temp_str >> command >> temp_str;\n\n\tif(command == USER_CMD_TYPE_3)\n\t{\n\t\tstd::string id_argument,id,garbage_string;\n\t\tS >> id_argument >> id >> garbage_string;\n\t\tif(id_argument == \"\")\n\t\t{\n\t\t\tPrint_All_Courses(courses);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(id_argument != CMD_ARGUMENT_1 || id == \"\")\n\t\t\t\tthrow ArgumentException(ERROR_1);\n\t\t\tif(std::stoi(id) <= 0)\n\t\t\t\tthrow ArgumentException(ERROR_1);\n\t\t\tif(garbage_string != \"\")\n\t\t\t\tthrow ArgumentException(ERROR_1);\n\n\t\t\tPrint_Course(courses,id);\n\t\t}\n\t}\n\telse if(command == USER_CMD_TYPE_4)\n\t{\n\t\tstd::string argument_1,argument_2,input_1,input_2,garbage_string;\n\t\tstd::string id,post_id;\n\t\tS >> argument_1 >> input_1 >> argument_2 >> input_2 >> garbage_string;\n\t\tif((argument_1 == CMD_ARGUMENT_1 || argument_1 == CMD_ARGUMENT_3 ) && (argument_2 == CMD_ARGUMENT_1 || argument_2 == CMD_ARGUMENT_3))\n\t\t{\n\t\t\tif(argument_1 == CMD_ARGUMENT_1)\n\t\t\t{\n\t\t\t\tid = input_1;\n\t\t\t\tpost_id = input_2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tid = input_2;\n\t\t\t\tpost_id = input_1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tthrow ArgumentException(ERROR_1);\n\n\t\tif(std::stoi(id) <=0 || std::stoi(post_id) <=0)\n\t\t\tthrow ArgumentException(ERROR_1);\n\t\t\n\t\tif(garbage_string != \"\")\n\t\t\tthrow ArgumentException(ERROR_1);\n\n\t\tPrint_User_Posts(users,id,post_id);\n\t}\n\telse if(command == USER_CMD_TYPE_5)\n\t{\n\t\tstd::string id_argument,id,garbage_string;\n\t\tS >> id_argument >> id >> garbage_string;\n\t\tif(id_argument != CMD_ARGUMENT_1 || id == \"\")\n\t\t\tthrow ArgumentException(ERROR_1);\n\t\tif(std::stoi(id) < 0)\n\t\t\tthrow ArgumentException(ERROR_1);\n\t\tif(garbage_string != \"\")\n\t\t\tthrow ArgumentException(ERROR_1);\n\n\t\tPrint_Personal_Page(users,id);\n\t}\n\telse if(command == USER_CMD_TYPE_7)\n\t{\n\t\tstd::string argument_str;\n\t\tS >> argument_str;\n\t\t\n\t\tif(argument_str != \"\")\n\t\t\tthrow ArgumentException(ERROR_1);\n\t\t\n\t\t(*current_user)->Print_Notifications();\n\t}\n\telse if(command == USER_CMD_TYPE_9)\n\t{\n\t\tstd::string argument_str;\n\t\tS >> argument_str;\n\t\tif(argument_str != \"\")\n\t\t\tthrow ArgumentException(ERROR_1);\n\n\t\tStudent *student = dynamic_cast<Student*>(*current_user);\n\t\tif(student == NULL)\n            throw AcessibilityException(ERROR_3);\n\n\t\tstudent->Print_Courses();\n\t}\n}\n\n\nvoid Get::Print_All_Courses(std::vector<Course*> courses)\n{\t\n\tif(courses.size() == 0)\n\t\tthrow CommandException(ERROR_4);\n\n\tfor(int i=0 ; i<courses.size(); i++)\n\t{\n\t\tcourses[i]->Print_Info();\n\t}\n\t\n}\n\nvoid Get::Print_Course(std::vector<Course*> courses , std::string course_id)\n{\n\tCourse *target_course;\n\tbool id_validation = false;\n\tfor(int i=0 ; i<courses.size() ; i++)\n\t{\n\t\tif(courses[i]->is_Valid_Id(course_id))\n\t\t{\n\t\t\tid_validation = true;\n\t\t\ttarget_course = courses[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(!id_validation)\n\t\tthrow AvailabilityException(ERROR_2);\n\t\n\ttarget_course->Print_All_Info();\n}\n\n\nvoid Get::Print_Personal_Page(std::vector<User*> &users,std::string user_id)\n{\n\tUser *user;\n\tbool id_validation = false;\n\tfor(int i=0 ; i<users.size() ; i++)\n\t{\n\t\tif(users[i]->is_Valid_Id(user_id))\n\t\t{\n\t\t\tid_validation = true;\n\t\t\tuser = users[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(!id_validation)\n\t\tthrow AvailabilityException(ERROR_2);\n\n\tuser->Print_Page_Info();\n}\n\nvoid Get::Print_User_Posts(std::vector<User*> &users,std::string user_id,std::string post_id)\n{\n\tUser *user;\n\tbool id_validation = false;\n\tfor(int i=0 ; i<users.size() ; i++)\n\t{\n\t\tif(users[i]->is_Valid_Id(user_id))\n\t\t{\n\t\t\tid_validation = true;\n\t\t\tuser = users[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(!id_validation)\n\t\tthrow AvailabilityException(ERROR_2);\n\t\n\tuser->Print_Post(post_id);\n}\n","filename":"/home/erfan/Desktop/Project6/A6_1/Get_method.cpp","identifier":"Text Change","lineCount":171,"languageId":"cpp"},"failed":true}
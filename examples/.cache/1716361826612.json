{"date":"2024-05-22T07:10:25.676Z","courseId":"17","assignment":"AP-Spring03-CA6","trace":{"version":310,"content":"#include \"Post_method.hpp\"\n\nPost::Post(std::string t , std::vector <std::string> cmds)\n:Method(t,cmds){}\n\n\nvoid Post::Process_Cmd(std::string cmd_line,std::vector<Major*> &majors,std::vector<Unit*> &units,std::vector<User*> &users ,std::vector<Course*> &courses, User **current_user)\n{\n\tstd::stringstream S(cmd_line);\n\n\tstd::string temp_str , command;\n\n\tS >> temp_str;\n\tS >> command;\n\tS >> temp_str;\n\n\tif(command == USER_CMD_TYPE_1)\n\t{\n\t\tstd::string argument_1,argument_2,input_1,input_2,garbage_string;\n\t\tstd::string id,password;\n\t\tS >> argument_1 >> input_1 >> argument_2 >> input_2 >> garbage_string;\n\n\t\tif(garbage_string != \"\")\n\t\t\tthrow ArgumentException(ERROR_1);\n\n\t\tif((argument_1 == CMD_ARGUMENT_1 || argument_1 == CMD_ARGUMENT_2) && (argument_2 == CMD_ARGUMENT_1 || argument_2 == CMD_ARGUMENT_2))\n\t\t{\n\t\t\tif(argument_1 == CMD_ARGUMENT_1)\n\t\t\t{\n\t\t\t\tid = input_1;\n\t\t\t\tpassword = input_2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tid = input_2;\n\t\t\t\tpassword = input_1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tthrow ArgumentException(ERROR_1);\n\t\t*current_user = User_Login(users,id,password);\n\t\tstd::cout << DONE_MESSAGE << std::endl;\n\n\t}\n\telse if(command == USER_CMD_TYPE_2)\n\t{\n\t\t(*current_user)->Logout();\n\t\t*current_user = NULL;\n\t\tstd::cout << DONE_MESSAGE << std::endl;\n\t}\n\telse if(command == USER_CMD_TYPE_4)\n\t{\n\t\tstd::string argument_1,argument_2,input_1,input_2;\n\t\tstd::string title,message;\n\t\tText_Reader(cmd_line,argument_1,argument_2,input_1,input_2);\n\n\t\tif((argument_1 == CMD_ARGUMENT_4 || argument_1 == CMD_ARGUMENT_5) && (argument_2 == CMD_ARGUMENT_4 || argument_2 == CMD_ARGUMENT_5))\n\t\t{\n\t\t\tif(argument_1 == CMD_ARGUMENT_4)\n\t\t\t{\n\t\t\t\ttitle = input_1;\n\t\t\t\tmessage = input_2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttitle = input_2;\n\t\t\t\tmessage = input_1;\n\t\t\t}\n\t\t}\n\t\telse\t\n\t\t\tthrow ArgumentException(ERROR_1);\n\t\t\n\t\tUT_Post *p = new UT_Post{\"\",title,message};\n\t\t(*current_user)->Add_Post(p);\n\n\t}\n\telse if(command == USER_CMD_TYPE_6)\n\t{\n\t\tstd::string target_id_argument,target_id,garbage_string;\n\t\tS >> target_id_argument >> target_id >> garbage_string; \n\t\tif(target_id_argument != CMD_ARGUMENT_1)\n\t\t\tthrow ArgumentException(ERROR_1);\n\t\tif(stoi(target_id) <= 0)\n\t\t\tthrow ArgumentException(ERROR_1);\n\t\tif(garbage_string != \"\")\n\t\t\tthrow ArgumentException(ERROR_1);\n\n\t\tConnect_Two_User(users,target_id,current_user);\n\t\tstd::cout << DONE_MESSAGE << std::endl;\n\t}\n\telse if(command == USER_CMD_TYPE_8)\n\t{\n\t\tstd::string course_id,professor_id,capacity_str,time,exam_date,class_number;\n\t\tstd::string operator_1,operator_2,operator_3,operator_4,operator_5,operator_6;\n\t\tstd::string input_1,input_2,input_3,input_4,input_5,input_6;\n\t\t\n\t\tstd::string opr ,inp;\n\t\tfor(int i=0 ; i<6 ; i++)\n\t\t{\n\t\t\tS >> opr >> inp;\n\t\t\tif(opr == \"course_id\")\n\t\t\t\tcourse_id = inp;\n\t\t\telse if(opr == \"professor_id\")\n\t\t\t\tprofessor_id = inp;\n\t\t\telse if(opr == \"capacity\")\n\t\t\t\tcapacity_str = inp;\n\t\t\telse if(opr == \"time\")\n\t\t\t\ttime = inp;\n\t\t\telse if(opr == \"exam_date\")\n\t\t\t\texam_date = inp;\n\t\t\telse if(opr == \"class_number\")\n\t\t\t\tclass_number = inp;\n\t\t\telse\n\t\t\t\tthrow CommandException(ERROR_1);\n\t\t}\n\n\t\tint capacity = std::stoi(capacity_str);\n\n\t\tif(capacity <=0 || std::stoi(class_number) <=0)\n\t\t\tthrow CommandException(ERROR_1);\n\n\t\tUnit *unit = Specify_Unit(units,course_id);\n\t\tUser *user = Specify_User(users,professor_id);\n\n\t\tProfessor *professor = dynamic_cast<Professor*>(user);\n\t\tif(professor == NULL)\n\t\t\tthrow CommandException(ERROR_3);\n\n\n\t\tif(!unit->is_Valid_Major(professor->get_Major_Id()))\n\t\t\tthrow CommandException(ERROR_3);\t\t\n\n\t\tif(!professor->is_Free(time))\n\t\t\tthrow CommandException(ERROR_3);\n\n\t\tint id = courses.size() + 1;\n\t\tCourse *new_course = new Course(std::to_string(id),unit->get_Name(),professor->get_Name(),capacity,unit->get_Majors_Id(),unit->get_Prerequisite(),exam_date,time,class_number);\n\t\tcourses.push_back(new_course);\n\t\tprofessor->Add_New_Course(new_course);\n\n\t\tSend_New_Course_Notification(users,professor_id,professor->get_Name(),NOTIFICATION_2);\n\n\t\tstd::cout << DONE_MESSAGE << std::endl;\n\n\t}\n}\n\nUser* Post::User_Login(std::vector<User*> &users , std::string id , std::string password)\n{\n\tfor(int i=0 ; i<users.size() ; i++)\n\t{\n\t\tif(users[i]->is_Valid_Id(id))\n\t\t{\n\t\t\tif(users[i]->is_Valid_Password(password))\n\t\t\t{\n\t\t\t\tusers[i]->Login();\n\t\t\t\treturn users[i];\n\t\t\t}\n\t\t\tthrow CommandException(ERROR_3);\n\t\t}\t\n\t}\n\tthrow CommandException(ERROR_2);\n}\n\nvoid Post::Connect_Two_User(std::vector<User*> &users , std::string target_id ,User **current_user)\n{\n\tbool id_validation = false;\n\tfor(int i=0 ; i<users.size() ; i++)\n\t{\n\t\tif(users[i]->is_Valid_Id(target_id))\n\t\t{\n\t\t\tid_validation = true;\n\t\t\tusers[i]->Connect(*current_user);\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(!id_validation)\n\t\tthrow CommandException(ERROR_2);\n}\n\n\nUser* Post::Specify_User(std::vector<User*> &users , std::string professor_id)\n{\n\tUser *user;\n\tbool id_validation = false;\n\tfor(int i=0 ; i<users.size() ; i++)\n\t{\n\t\tif(users[i]->is_Valid_Id(professor_id))\n\t\t{\n\t\t\tid_validation =true;\n\t\t\tuser = users[i];\n\t\t\tbreak;\n\t\t}\t\n\t}\n\tif(!id_validation)\n\t\tthrow CommandException(ERROR_2);\n\treturn user;\n\n}\n\nUnit* Post::Specify_Unit(std::vector<Unit*> units, std::string unit_id)\n{\n\tUnit *unit;\n\tbool id_validation = false;\n\tfor(int i=0 ; i<units.size() ; i++)\n\t{\n\t\tif(units[i]->is_Valid_Id(unit_id))\n\t\t{\n\t\t\tid_validation = true;\n\t\t\tunit = units[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(!id_validation)\n\t\tthrow CommandException(ERROR_2);\n\treturn unit;\t\n}\n\nvoid Post::Text_Reader(std::string cmd_line,std::string &opr1,std::string &opr2,std::string &inp1,std::string &inp2)\n{\n\tstd::stringstream S(cmd_line);\n\tstd::string temp_str;\n\tS >> temp_str >> temp_str >> temp_str;\n\t\n\tS >> opr1;\n\tint first_delimiter = cmd_line.find('\"');\n\tstd::string str1 = cmd_line.erase(0,first_delimiter+1);\n\tint second_delimiter = cmd_line.find('\"');\n\tstd::string str2 = cmd_line.substr(0,second_delimiter);\n\n\tinp1 = '\"' + str2 + '\"';\n\n\tstd::string new_cmd_line = cmd_line.erase(0,second_delimiter+1);\n\tstd::stringstream S2(new_cmd_line);\n\tS2 >> opr2;\n\n\tfirst_delimiter = new_cmd_line.find('\"');\n\tstd::string str3 = new_cmd_line.erase(0,first_delimiter+1);\n\tsecond_delimiter = new_cmd_line.find('\"');\n\tstd::string str4 = new_cmd_line.substr(0,second_delimiter);\n\n\tinp2 = '\"' + str4 + '\"';\n}\n\n\nvoid Post::Send_New_Course_Notification(std::vector<User*> users,std::string id,std::string name,std::string notice_text)\n{\n\tNotification *new_notif = new Notification{id,name,notice_text};\n\tfor(int i=1 ; i<users.size() ; i++)\n\t{\n\t\tusers[i]->Recieve_Notification(new_notif);\n\t}\n}","filename":"/home/erfan/Desktop/Project6/A6_1/Post_method.cpp","identifier":"Text Change","lineCount":253,"languageId":"cpp"},"failed":false}
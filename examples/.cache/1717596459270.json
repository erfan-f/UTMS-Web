{"date":"2024-06-05T14:07:37.977Z","courseId":"17","assignment":"AP-Spring03-CA6-phase2","trace":{"content":"#include \"Post_method.hpp\"\n\nPost::Post(std::string t , std::vector <std::string> cmds)\n:Method(t,cmds){}\n\nPost::~Post() {}\n\n\nvoid Post::Process_Cmd(std::string cmd_line,std::vector<Major*> &majors,std::vector<Unit*> &units,std::vector<User*> &users ,std::vector<Course*> &courses, User **current_user,std::vector<std::string> &response)\n{\n\tstd::stringstream S(cmd_line);\n\n\tstd::string temp_str , command;\n\n\tS >> temp_str;\n\tS >> command;\n\tS >> temp_str;\n\n\tif(command == LOGIN_CMD)\n\t{\n\t\tstd::string argument_1,argument_2,input_1,input_2,garbage_string;\n\t\tstd::string id,password;\n\t\tS >> argument_1 >> input_1 >> argument_2 >> input_2 >> garbage_string;\n\n\t\tif(garbage_string != \"\")\n\t\t\tthrow ArgumentException(BAD_REQUEST_ERROR);\n\n\t\tif((argument_1 == ID_ARGUMENT || argument_1 == PASSWORD_ARGUMENT) && (argument_2 == ID_ARGUMENT || argument_2 == PASSWORD_ARGUMENT))\n\t\t{\n\t\t\tif(argument_1 == ID_ARGUMENT)\n\t\t\t{\n\t\t\t\tid = input_1;\n\t\t\t\tpassword = input_2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tid = input_2;\n\t\t\t\tpassword = input_1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tthrow ArgumentException(BAD_REQUEST_ERROR);\n\n\t\tif(!is_Number(id))\n            throw ArgumentException(BAD_REQUEST_ERROR);\n\n\t\t*current_user = User_Login(users,id,password);\n\t\t\n\t\tstd::ostringstream os;\n        os << DONE_MESSAGE << std::endl;\n        response.push_back(os.str());\n\t}\n\telse if(command == LOGOUT_CMD)\n\t{\n\t\tstd::string garbage_string;\n\t\tS >> garbage_string;\n\t\tif(garbage_string != \"\")\n\t\t\tthrow ArgumentException(BAD_REQUEST_ERROR);\n\t\t(*current_user)->Logout();\n\t\t*current_user = NULL;\n\n\t\tstd::ostringstream os;\n        os << DONE_MESSAGE << std::endl;\n        response.push_back(os.str());\n\t}\n\telse if(command == POST_CMD)\n\t{\n\t\tstd::string argument,garbage_str;\n\t\tstd::string title,message,image;\n\t\tbool title_is_entered = false;\n\t\tbool message_is_entered = false;\n\t\tbool image_is_entered = false;\n\n\t\tfor(int i=0 ; i<3 ; i++)\n\t\t{\n\t\t\tS >> argument;\n\t\t\tif(i==2 && title_is_entered && message_is_entered && argument == \"\")\n\t\t\t{\n\t\t\t\timage = \"\";\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif(argument == TITLE_ARGUMENT && !title_is_entered)\n\t\t\t{\n\t\t\t\ttitle = Text_Reader(cmd_line);\n\t\t\t\ttitle_is_entered = true;\n\t\t\t\tS.str(cmd_line);\n\t\t\t}\n\t\t\telse if(argument == MESSAGE_ARGUMENT && !message_is_entered)\n\t\t\t{\n\t\t\t\tmessage = Text_Reader(cmd_line);\n\t\t\t\tmessage_is_entered = true;\n\t\t\t\tS.str(cmd_line);\n\t\t\t}\n\t\t\telse if(argument == IMAGE_ARGUMENT  && !image_is_entered)\n\t\t\t{\n\t\t\t\tS >> image;\n\t\t\t\timage_is_entered = true;\n\t\t\t\tint image_string_position = cmd_line.find(image);\n\t\t\t\tcmd_line.erase(0,image_string_position + image.length());\n\t\t\t}\n\t\t\telse \n\t\t\t\tthrow ArgumentException(BAD_REQUEST_ERROR);\n\n\t\t\targument = \"\";\n\t\t}\n\n\t\tS >> garbage_str;\n\t\tif(garbage_str != \"\" || title == \"\" || message ==  \"\"  || (image == \"\" && image_is_entered))\n\t\t\tthrow ArgumentException(BAD_REQUEST_ERROR);\n\n\t\tUT_Post *new_post = new UT_Post(\"\",title,message,(*current_user)->get_Name(),image);\n\t\t(*current_user)->Add_Post(new_post);\n\n\t\tstd::ostringstream os;\n        os << DONE_MESSAGE << std::endl;\n        response.push_back(os.str());\n\t}\n\telse if(command == CONNECT_CMD)\n\t{\n\t\tstd::string target_id_argument,target_id,garbage_string;\n\t\tS >> target_id_argument >> target_id >> garbage_string; \n\t\tif(target_id_argument != ID_ARGUMENT || target_id == \"\")\n\t\t\tthrow ArgumentException(BAD_REQUEST_ERROR);\n\n\t\tif(!is_Number(target_id))\n            throw ArgumentException(BAD_REQUEST_ERROR);\n\n\t\tif(stoll(target_id) <= 0)\n\t\t\tthrow ArgumentException(BAD_REQUEST_ERROR);\n\t\tif(garbage_string != \"\")\n\t\t\tthrow ArgumentException(BAD_REQUEST_ERROR);\n\n\t\tif((*current_user)->get_Id() == target_id)\n\t\t\tthrow AcessibilityException(PERMISSION_DENIED_ERROR);\n\n\t\tConnect_Two_User(users,target_id,current_user);\n\t\t\n\t\tstd::ostringstream os;\n        os << DONE_MESSAGE << std::endl;\n        response.push_back(os.str());\n\t}\n\telse if(command == COURSE_OFFER_CMD)\n\t{\n\t\tstd::string course_id,professor_id,capacity_str,time,exam_date,class_number,garbage_string;\n\t\tstd::string operator_1,operator_2,operator_3,operator_4,operator_5,operator_6;\n\t\tstd::string input_1,input_2,input_3,input_4,input_5,input_6;\n\t\tbool course_id_entered = false;\n\t\tbool professor_id_entered = false;\n\t\tbool capacity_str_entered = false;\n\t\tbool time_entered = false;\n\t\tbool exam_date_entered = false;\n\t\tbool class_number_entered = false;\n\t\tstd::string opr ,inp;\n\t\tfor(int i=0 ; i<6 ; i++)\n\t\t{\n\t\t\tS >> opr >> inp ;\n\t\t\tif(inp == \"\")\n\t\t\t\tthrow ArgumentException(BAD_REQUEST_ERROR);\n\t\t\tif(opr == COURSE_ID_ARGUMENT && !course_id_entered)\n\t\t\t{\n\t\t\t\tcourse_id = inp;\n\t\t\t\tcourse_id_entered = true;\n\t\t\t}\n\t\t\telse if(opr == PROFESSOR_ARGUMENT && !professor_id_entered)\n\t\t\t{\n\t\t\t\tprofessor_id = inp;\n\t\t\t\tprofessor_id_entered = true;\n\t\t\t}\n\t\t\telse if(opr == CAPACITY_ARGUMENT && !capacity_str_entered)\n\t\t\t{\n\t\t\t\tcapacity_str = inp;\n\t\t\t\tcapacity_str_entered = true;\n\t\t\t}\n\t\t\telse if(opr == TIME_ARGUMENT && !time_entered)\n\t\t\t{\n\t\t\t\ttime = inp;\n\t\t\t\ttime_entered = true;\t\t\t\t\n\t\t\t}\t\n\t\t\telse if(opr == EXAM_DATE_ARGUMENT && !exam_date_entered)\n\t\t\t{\n\t\t\t\texam_date = inp;\n\t\t\t\texam_date_entered = true;\t\t\t\t\n\t\t\t}\n\t\t\telse if(opr == CLASS_NUMBER_ARGUMENT && !class_number_entered)\n\t\t\t{\n\t\t\t\tclass_number = inp;\n\t\t\t\tclass_number_entered = true;\t\t\t\t\n\t\t\t}\t\n\t\t\telse\n\t\t\t\tthrow ArgumentException(BAD_REQUEST_ERROR);\n\t\t\tinp = \"\";\n\t\t}\n\t\tS >> garbage_string;\n\t\tif(garbage_string != \"\")\n\t\t\tthrow ArgumentException(BAD_REQUEST_ERROR);\n\n\t\tif(!is_Number(capacity_str)  || !is_Number(class_number) || !is_Number(course_id) || !is_Number(professor_id))\n            throw ArgumentException(BAD_REQUEST_ERROR);\n\n\t\tint capacity = std::stoll(capacity_str);\n\n\t\tif(capacity <=0 || std::stoll(class_number) <=0 || std::stoll(course_id) <=0 || std::stoll(professor_id) <=0)\n\t\t\tthrow ArgumentException(BAD_REQUEST_ERROR);\n\n\t\tUnit *unit = Find_Unit(units,course_id);\n\t\tUser *user = Find_User(users,professor_id);\n\n\t\tProfessor *professor = dynamic_cast<Professor*>(user);\n\t\tif(professor == NULL)\n\t\t\tthrow AcessibilityException(PERMISSION_DENIED_ERROR);\n\n\n\t\tif(!unit->is_Valid_Major(professor->get_Major_Id()))\n\t\t\tthrow AvailabilityException(PERMISSION_DENIED_ERROR);\t\t\n\n\t\tif(!professor->is_Free(time))\n\t\t\tthrow AvailabilityException(PERMISSION_DENIED_ERROR);\n\n\t\tint id = courses.size() + 1;\n\t\tCourse *new_course = new Course(std::to_string(id),unit->get_Name(),professor->get_Name(),professor_id,capacity,unit->get_Majors_Id(),unit->get_Prerequisite(),exam_date,time,class_number);\n\t\tcourses.push_back(new_course);\n\t\tprofessor->Add_New_Course(new_course);\n\n\t\tSend_Public_Notification(users,professor_id,professor->get_Name(),NEW_COURSE_OFFERING_NOTIF);\n\n\t\tstd::ostringstream os;\n        os << DONE_MESSAGE << std::endl;\n        response.push_back(os.str());\n\t}\n\telse if(command == PROFILE_PHOTO_CMD)\n\t{\n\t\tstd::string phtoto_argument,photo_address,garbage_str;\n\t\tS >> phtoto_argument >> photo_address >> garbage_str;\n\t\tif((phtoto_argument != PHOTO_ARGUMENT) || photo_address == \"\" || garbage_str != \"\")\n\t\t\tthrow ArgumentException(BAD_REQUEST_ERROR);\n\n\t\t(*current_user)->Set_Profile_Photo(photo_address);\n\t\tstd::ostringstream os;\n        os << DONE_MESSAGE << std::endl;\n        response.push_back(os.str());\n\t}\t\n\telse if(command == COURSE_POST_CMD)\n\t{\n\t\tstd::string argument,garbage_str;\n\t\tstd::string course_id,title,message,image;\n\t\tbool course_id_is_entered = false;\n\t\tbool title_is_entered = false;\n\t\tbool message_is_entered = false;\n\t\tbool image_is_entered = false;\n\n\t\tfor(int i=0 ; i<4 ; i++)\n\t\t{\n\t\t\tS >> argument;\n\t\t\tif(i==3 && title_is_entered && message_is_entered && course_id_is_entered && argument == \"\")\n\t\t\t{\n\t\t\t\timage = \"\";\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif(argument == ID_ARGUMENT && !course_id_is_entered)\n\t\t\t{\n\t\t\t\tS >> course_id;\n\t\t\t\tcourse_id_is_entered = true;\n\t\t\t\tint id_string_position = cmd_line.find(course_id);\n\t\t\t\tcmd_line.erase(0,id_string_position + course_id.length());\n\t\t\t}\n\t\t\telse if(argument == TITLE_ARGUMENT && !title_is_entered)\n\t\t\t{\n\t\t\t\ttitle = Text_Reader(cmd_line);\n\t\t\t\ttitle_is_entered = true;\n\t\t\t\tS.str(cmd_line);\n\t\t\t}\n\t\t\telse if(argument == MESSAGE_ARGUMENT && !message_is_entered)\n\t\t\t{\n\t\t\t\tmessage = Text_Reader(cmd_line);\n\t\t\t\tmessage_is_entered = true;\n\t\t\t\tS.str(cmd_line);\n\t\t\t}\n\t\t\telse if(argument == IMAGE_ARGUMENT  && !image_is_entered)\n\t\t\t{\n\t\t\t\tS >> image;\n\t\t\t\timage_is_entered = true;\n\t\t\t\tint image_string_position = cmd_line.find(image);\n\t\t\t\tcmd_line.erase(0,image_string_position + image.length());\n\t\t\t}\n\t\t\telse \n\t\t\t\tthrow ArgumentException(BAD_REQUEST_ERROR);\n\n\t\t\targument = \"\";\n\t\t}\n\n\t\tS >> garbage_str;\n\t\tif(garbage_str != \"\"  || !is_Number(course_id) || title == \"\" || message ==  \"\"  || (image == \"\" && image_is_entered))\n\t\t\tthrow ArgumentException(BAD_REQUEST_ERROR);\n\n\t\tCourse *course = Find_Course(courses,course_id);\n\t\tstd::vector<std::string> participants = course->get_Participants_Id();\n\n\t\tProfessor *professor = dynamic_cast<Professor*>(*current_user);\n\t\tStudent *student = dynamic_cast<Student*>(*current_user);\n\n\t\tif(student != NULL)\n\t\t{\n\t\t\tif(!course->is_Allowed_to_Post_in_Channel(student->get_Id()))\n\t\t\t\tthrow AcessibilityException(PERMISSION_DENIED_ERROR);\n\t\t\t\n\t\t\tUT_Post *new_post = new UT_Post(\"\",title,message,student->get_Name(),image);\n\t\t\tcourse->Add_Post_to_Channel(new_post);\n\t\t\tSend_Channel_Notification(users,participants,course_id,course->get_Name());\n\t\t}\n\t\telse if(professor != NULL)\n\t\t{\n\t\t\tif(!course->is_Allowed_to_Post_in_Channel(professor->get_Id()))\n\t\t\t\tthrow AcessibilityException(PERMISSION_DENIED_ERROR);\n\n\t\t\tUT_Post *new_post = new UT_Post(\"\",title,message,professor->get_Name(),image);\n\t\t\tcourse->Add_Post_to_Channel(new_post);\n\t\t\tSend_Channel_Notification(users,participants,course_id,course->get_Name());\n\t\t}\n\t\telse \n\t\t\tthrow AcessibilityException(PERMISSION_DENIED_ERROR);\n\n\t\tstd::ostringstream os;\n        os << DONE_MESSAGE << std::endl;\n        response.push_back(os.str());\n\t}\n\telse if(command == TA_FORM_CMD)\n\t{\n\t\tstd::string argument,garbage_str;\n\t\tstd::string course_id,message;\n\t\tbool course_id_is_entered = false;\n\t\tbool message_is_entered = false;\n\n\t\tfor(int i=0 ; i<2 ; i++)\n\t\t{\n\t\t\tS >> argument;\n\t\t\tif(argument == COURSE_ID_ARGUMENT && !course_id_is_entered)\n\t\t\t{\n\t\t\t\tS >> course_id;\n\t\t\t\tcourse_id_is_entered = true;\n\t\t\t\tint course_id_string_position = cmd_line.find(course_id);\n\t\t\t\tcmd_line.erase(0,course_id_string_position + course_id.length());\n\t\t\t\t\n\t\t\t}\n\t\t\telse if(argument == MESSAGE_ARGUMENT && !message_is_entered)\n\t\t\t{\n\t\t\t\tmessage = Text_Reader(cmd_line);\n\t\t\t\tmessage_is_entered = true;\n\t\t\t\tS.str(cmd_line);\n\t\t\t}\n\t\t\telse \n\t\t\t\tthrow ArgumentException(BAD_REQUEST_ERROR);\n\t\t}\n\t\tS >> garbage_str;\n\t\tif(garbage_str != \"\" || course_id ==  \"\"  || message == \"\")\n\t\t\tthrow ArgumentException(BAD_REQUEST_ERROR);\n\t\t\n\t\tCourse *course = Find_Course(courses,course_id);\n\n\t\tProfessor *professor = dynamic_cast<Professor*>(*current_user);\n\t\tif(professor == NULL)\n\t\t\tthrow AcessibilityException(PERMISSION_DENIED_ERROR);\n\n\t\tif(!professor->Do_You_Offer(course))\n\t\t\tthrow AvailabilityException(PERMISSION_DENIED_ERROR);\n\n\t\tstd::string title;\n\t\ttitle = TA_FORM_TITLE + SPACE_CHAR + course->get_Name() + SPACE_CHAR + COURSE_TEXT;\n\n\t\tTA_Form *new_form = new TA_Form(\"\",title,message,professor->get_Name(),course_id,course->get_All_Info());\n\t\tprofessor->Add_Post(new_form);\n\n\t\tstd::ostringstream os;\n        os << DONE_MESSAGE << std::endl;\n        response.push_back(os.str());\n\t}\n\telse if(command == TA_REQUEST_CMD)\n\t{\n\t\tstd::string argument_1,argument_2,input_1,input_2,garbage_string;\n\t\tstd::string professor_id,form_id;\n\t\tS >> argument_1 >> input_1 >> argument_2 >> input_2 >> garbage_string;\n\n\t\tif(garbage_string != \"\")\n\t\t\tthrow ArgumentException(BAD_REQUEST_ERROR);\n\n\t\tif((argument_1 == PROFESSOR_ARGUMENT || argument_1 == FORM_ID_ARGUMENT) && (argument_2 == PROFESSOR_ARGUMENT || argument_2 == FORM_ID_ARGUMENT))\n\t\t{\n\t\t\tif(argument_1 == PROFESSOR_ARGUMENT)\n\t\t\t{\n\t\t\t\tprofessor_id = input_1;\n\t\t\t\tform_id = input_2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprofessor_id = input_2;\n\t\t\t\tform_id = input_1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tthrow ArgumentException(BAD_REQUEST_ERROR);\n\n\n\t\tif(!is_Number(professor_id) || !is_Number(form_id))\n            throw ArgumentException(BAD_REQUEST_ERROR);\n\n\t\tStudent *student = dynamic_cast<Student*>(*current_user);\n\t\tif(student == NULL)\n\t\t\tthrow AcessibilityException(PERMISSION_DENIED_ERROR);\n\n\t\tUser *user = Find_User(users,professor_id);\n\t\tProfessor *professor = dynamic_cast<Professor*>(user);\n\t\tif(professor == NULL)\n\t\t\tthrow AvailabilityException(NOT_FOUND_ERROR);\n\n\t\tTA_Form *form = dynamic_cast<TA_Form*>(professor->Find_Post(form_id));\n\t\tif(form == NULL)\n\t\t\tthrow AvailabilityException(NOT_FOUND_ERROR);\n\t\t\n\t\tCourse *course = Find_Course(courses,form->get_Course_Id());\n\n\t\tif(!course->is_Valid_for_TA(student->get_Semester()))\n\t\t\tthrow AcessibilityException(PERMISSION_DENIED_ERROR);\n\n\t\tform->Add_TA_Request(student->get_Id());\n\n\t\tstd::ostringstream os;\n        os << DONE_MESSAGE << std::endl;\n        response.push_back(os.str());\n\t}\n\telse if(command == CLOSE_TA_FORM_CMD)\n\t{\n\t\tstd::string argument,form_id,garbage_str;\n\t\tS >> argument >> form_id >> garbage_str;\n\n\t\tif(argument != ID_ARGUMENT || !is_Number(form_id) || garbage_str != \"\")\n\t\t\tthrow ArgumentException(BAD_REQUEST_ERROR);\n\n\t\tProfessor *professor = dynamic_cast<Professor*>(*current_user);\n\t\tif(professor == NULL)\n\t\t\tthrow AvailabilityException(NOT_FOUND_ERROR);\n\n\t\tTA_Form *form = dynamic_cast<TA_Form*>(professor->Find_Post(form_id));\n\t\tif(form == NULL)\n\t\t\tthrow AvailabilityException(NOT_FOUND_ERROR);\n\n\t\tCourse *course = Find_Course(courses,form->get_Course_Id());\n\n\t\tTA_Admission(users,form->get_Volunteers(),course);\n\n\t\tprofessor->Delete_Form(form);\n\n\t}\n}\n\nUser* Post::User_Login(std::vector<User*> &users , std::string id , std::string password)\n{\n\tfor(int i=0 ; i<users.size() ; i++)\n\t{\n\t\tif(users[i]->is_Valid_Id(id))\n\t\t{\n\t\t\tif(users[i]->is_Valid_Password(password))\n\t\t\t{\n\t\t\t\tusers[i]->Login();\n\t\t\t\treturn users[i];\n\t\t\t}\n\t\t\tthrow AvailabilityException(PERMISSION_DENIED_ERROR);\n\t\t}\t\n\t}\n\tthrow AvailabilityException(NOT_FOUND_ERROR);\n}\n\nvoid Post::Connect_Two_User(std::vector<User*> &users , std::string target_id ,User **current_user)\n{\n\tUser *target_user = Find_User(users,target_id);\n\n\ttarget_user->Connect(*current_user);\n\t(*current_user)->Connect(target_user);\n}\n\n\nstd::string Post::Text_Reader(std::string &cmd_line)\n{\n\tint first_delimiter = cmd_line.find(TEXT_CHAR);\n\tstd::string temp_str = cmd_line.erase(0,first_delimiter+1);\n\tint second_delimiter = cmd_line.find(TEXT_CHAR);\n\tif(second_delimiter == -1 || first_delimiter == -1)\n\t\tthrow ArgumentException(BAD_REQUEST_ERROR);\n\tstd::string text = cmd_line.substr(0,second_delimiter);\n\tcmd_line.erase(0,second_delimiter+1);\n\n\treturn TEXT_CHAR + text + TEXT_CHAR;\n}\n\n\nvoid Post::Send_Public_Notification(std::vector<User*> users,std::string id,std::string name,std::string notice_text)\n{\n\tfor(int i=1 ; i<users.size() ; i++)\n\t{\n\t\tusers[i]->Recieve_Notification(new Notification{id,name,notice_text});\n\t}\n\n}\n\n\nvoid Post::Send_Channel_Notification(std::vector<User*> users,std::vector<std::string> participants_id,std::string course_id,std::string course_name)\n{\n\tUser *user;\n\tfor(int i=0 ; i<participants_id.size() ; i++)\n\t{\n\t\tuser = Find_User(users,participants_id[i]);\n\t\tuser->Recieve_Notification(new Notification{course_id,course_name,NEW_COURSE_POST_NOTIF});\n\t}\n}\n\nvoid Post::TA_Admission(std::vector<User*> users,std::vector<std::string> volunteers_id,Course *course)\n{\n\tIOHandler template_io_handler;\n\tstd::ostringstream os1;\n\n\tos1 << TA_ADMISSION_TEXT_PART_1 << SPACE_CHAR << volunteers_id.size() << SPACE_CHAR << TA_ADMISSION_TEXT_PART_2 << std::endl;\n\ttemplate_io_handler.Print_Data(os1.str());\n\n\tfor(int i=0 ; i<volunteers_id.size() ; i++)\n\t{\n\t\tstd::string response;\n\t\tStudent *student = dynamic_cast<Student*> (Find_User(users,volunteers_id[i])); \n\t\tif(student == NULL)\n\t\t\tthrow AcessibilityException(PERMISSION_DENIED_ERROR);\n\n\t\tstd::ostringstream os2;\n\t\tos2 << student->get_Id() << SPACE_CHAR << student->get_Name() \n\t\t\t\t\t<< SPACE_CHAR << student->get_Semester() << \":\" << SPACE_CHAR;\n\t\t\t\t\t\n\t\ttemplate_io_handler.Print_Data(os2.str());\n\t\ttemplate_io_handler.get_Command_Line(response);\n\t\tstd::cout << std::endl;\n\n\t\tif(response == ACCEPTION_TEXT)\n\t\t{\n\t\t\tcourse->Add_TA(student->get_Id());\n\t\t\tstudent->Add_Collaborated_Course(course);\n\t\t\tstudent->Recieve_Notification(new Notification{course->get_Id(),course->get_Name(),ACCEPTION_NOTIF});\n\t\t}\n\t\telse if(response == REJECTION_TEXT)\n\t\t\tstudent->Recieve_Notification(new Notification{course->get_Id(),course->get_Name(),REJECTION_NOTIF});\n\t\telse\n\t\t\ti--;\n\t}\n}\n","filename":"/home/erfan/Desktop/Project6_2/A6_1/Post_method.cpp","identifier":"Save Document","languageId":"cpp","version":18,"lineCount":551},"failed":false}
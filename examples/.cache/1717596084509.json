{"date":"2024-06-05T14:01:22.919Z","courseId":"17","assignment":"AP-Spring03-CA6-phase2","trace":{"version":22,"content":"#include \"course.hpp\"\n\nCourse::Course(std::string i,std::string n , std::string p_n,std::string p_i , int cap ,std::vector <std::string> m_i,std::string pre,std::string d, std::string t,std::string c_n)\n{\n    id = i;\n    name = n;\n    professor_name = p_n;\n    professor_id = p_i;\n    capacity = cap;\n    class_number = c_n;\n    majors_id = m_i;\n    prerequisite = pre;\n    num_of_posts_history = 0;\n\n    std::stringstream S(d);\n    std::string day,month,year;\n\n    getline(S,year,DATE_SEPRATOR);\n    getline(S,month,DATE_SEPRATOR);\n    getline(S,day,DATE_SEPRATOR);\n    \n    exam_date = new Date(std::stoll(day),std::stoll(month),std::stoll(year));\n\n    std::stringstream S2(t);\n    std::string day_of_week_str,start_time_str,end_time_str;\n\n    getline(S2,day_of_week_str,DAY_TIME_SEPRATOR);\n    getline(S2,start_time_str,START_END_SEPRATOR);\n    getline(S2,end_time_str,START_END_SEPRATOR);\n\n    Week day_of_week = Specify_Day_Of_Week(day_of_week_str);\n    int start_time = stoll(start_time_str);\n    int end_time = stoll(end_time_str);\n\n\n    if((start_time < 1 && start_time > 24) || (end_time < 1 && end_time > 24))\n        throw ArgumentException(BAD_REQUEST_ERROR);\n    \n    if(end_time <= start_time)\n        throw ArgumentException(BAD_REQUEST_ERROR);\n\n    class_time = new Time(day_of_week,start_time,end_time);\n\n}\n\nCourse::~Course() {}\n\nbool Course::is_Valid_Id(std::string course_id)\n{\n    if(id == course_id)\n        return true;\n    return false;\n}\n\nbool Course::is_Valid_Semester(std::string semester)\n{\n    if(std::stoll(semester) >= std::stoll(prerequisite))\n        return true;\n    return false;\n}\n\nbool Course::is_Valid_for_TA(std::string semester)\n{\n    if(std::stoll(semester) > std::stoll(prerequisite))\n        return true;\n    return false;\n}\n\n\n\nbool Course::is_Valid_Major(std::string id)\n{\n    for(int i=0 ; i<majors_id.size() ; i++)\n    {\n        if(id == majors_id[i])\n            return true;\n    }\n    return false;\n}\n\nstd::string Course::get_Info()\n{\n    std::ostringstream S;\n    S << id << SPACE_CHAR << name << SPACE_CHAR << capacity << SPACE_CHAR << professor_name << std::endl;\n    return S.str();\n}\n\nstd::string Course::get_All_Info()\n{\n    std::ostringstream S;\n    std::string class_time_str,date_str;\n    class_time_str = class_time->get_Time();\n    date_str = exam_date->get_Date();\n    S << id << SPACE_CHAR << name << SPACE_CHAR << capacity << SPACE_CHAR << professor_name << SPACE_CHAR\n        << class_time_str << SPACE_CHAR << date_str << SPACE_CHAR << class_number << std::endl;\n\n    return S.str();\n}\n\nstd::string Course::get_Name()\n{\n    return name;\n}\n\nstd::string Course::get_Channel_Info()\n{\n    std::ostringstream S;\n    S << get_All_Info();\n\n    Sort_Channel_Posts();\n    \n    for(int i=0 ; i<channel.size() ; i++)\n    {\n        S  << channel[i]->get_Info_Include_Author();\n    }\n    return S.str();\n}\n\n\nstd::string Course::get_Channel_Post(std::string post_id)\n{\n    bool post_id_validation = false;\n    UT_Post *target_post;\n    for(int i=0 ; i<channel.size() ; i++)\n    {\n        if(channel[i]->get_Id() == post_id)\n        {\n            post_id_validation =true;\n            target_post = channel[i];\n            break;\n        }\n    }\n    if(!post_id_validation)\n        throw AvailabilityException(NOT_FOUND_ERROR);\n    \n    return target_post->get_All_Info_Include_Author();\n}\n\n\nstd::string Course::get_Id()\n{\n    return id;\n}\n\nstd::vector<std::string> Course::get_Participants_Id()\n{\n    return participants_id;\n}\n\nbool Course::is_Interrupted(Course *course)\n{\n    if(exam_date->is_Equal_Date(course->exam_date))\n    {\n        return true;\n    }\n\n    Week day_of_week;\n    int start_time,end_time;\n    day_of_week = course->class_time->get_Day();\n    start_time = course->class_time->get_Start();\n    end_time = course->class_time->get_End();\n\n    if(class_time->is_Interrupt_Time(day_of_week,start_time,end_time))\n        return true;\n    \n    return false;\n}\n\nbool Course::is_Interrupted(std::string time)\n{\n    std::stringstream S(time);\n    std::string day_of_week_str,start_time,end_time;\n\n    getline(S,day_of_week_str,DAY_TIME_SEPRATOR);\n    getline(S,start_time,START_END_SEPRATOR);\n    getline(S,end_time,START_END_SEPRATOR);\n\n    Week day_of_week = Specify_Day_Of_Week(day_of_week_str);\n\n    if(class_time->is_Interrupt_Time(day_of_week,std::stoll(start_time),std::stoll(end_time)))\n        return true;\n    return false;\n}\n\nbool Course::is_Allowed_to_Post_in_Channel(std::string user_id)\n{\n    if(user_id == professor_id)\n        return true;\n\n    for(int i=0 ; i<teaching_assistants_id.size() ; i++)\n    {\n        if(teaching_assistants_id[i] == user_id)\n            return true;\n    }\n    return false;\n}\n\n\nbool Course::is_Allowed_to_View_Channel(std::string user_id)\n{\n    if(user_id == professor_id)\n        return true;\n\n    for(int i=0 ; i<teaching_assistants_id.size() ; i++)\n    {\n        if(teaching_assistants_id[i] == user_id)\n            return true;\n    }\n    for(int i=0 ; i<participants_id.size() ; i++)\n    {\n        if(participants_id[i] == user_id)\n            return true;\n    }\n\n    return false;\n}\n\n\nWeek Course::Specify_Day_Of_Week(std::string day_of_week_str)\n{\n    Week day_of_week;\n\n    if(day_of_week_str == \"Saturday\")\n        day_of_week = Saturday;\n    else if(day_of_week_str == \"Sunday\")\n        day_of_week = Sunday;\n    else if(day_of_week_str == \"Monday\")\n        day_of_week = Monday;\n    else if(day_of_week_str == \"Tuesday\")\n        day_of_week = Tuesday;\n    else if(day_of_week_str == \"Wednesday\")\n        day_of_week = Wednesday;\n    else\n        throw ArgumentException(BAD_REQUEST_ERROR);\n\n    return day_of_week;\n}\n\nvoid Course::Free_Allocated_Memory()\n{\n    delete class_time;\n    delete exam_date;\n}\n\nvoid Course::Add_Student(std::string student_id)\n{\n    participants_id.push_back(student_id);\n}\n\nvoid Course::Add_TA(std::string volunteer_id)\n{\n    teaching_assistants_id.push_back(volunteer_id);\n}\n\nvoid Course::Add_Post_to_Channel(UT_Post *new_post)\n{\n    new_post->set_Id(std::to_string(num_of_posts_history +1));\n    channel.push_back(new_post);\n\tnum_of_posts_history++;\n}\n\n\nvoid Course::Sort_Channel_Posts()\n{\n\tUT_Post *temp;\n\tfor(int i=0 ; i<channel.size() ; i++)\n\t{\n\t\tfor(int j=0 ; j<channel.size() -1 ; j++)\n\t\t{\n\t\t\tif(channel[j]->Compare_Id(channel[j+1]))\n\t\t\t{\n\t\t\t\ttemp = channel[j];\n\t\t\t\tchannel[j] = channel[j+1];\n\t\t\t\tchannel[j+1] = temp;\n\t\t\t}\n\t\t}\n\t}\n}","filename":"/home/erfan/Desktop/Project6_2/A6_1/course.cpp","identifier":"Text Change","lineCount":278,"languageId":"cpp"},"failed":false}e}
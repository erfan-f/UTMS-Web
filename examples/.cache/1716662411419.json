{"date":"2024-05-25T18:40:10.361Z","courseId":"17","assignment":"AP-Spring03-CA6","trace":{"version":180,"content":"#include \"user.hpp\"\n\nUser::User(std::string n,std::string i,std::string p)\n{\n\tname = n;\n\tid = i;\n\tpassword = p;\n\tlogged_in = false;\n\tnum_of_posts_history = 0;\n}\n\nUser::User(std::string n,std::string i,std::string m,std::string m_i,std::string p)\n{\n\tname = n;\n\tid = i;\n\tmajor_id = m_i;\n\tmajor = m;\n\tpassword = p;\n\tlogged_in = false;\n\tnum_of_posts_history = 0;\n}\n\nbool User::is_Logged_In()\n{\n\treturn logged_in;\n}\n\nbool User::is_Valid_Id(std::string i)\n{\n\tif(id == i)\n\t\treturn true;\n\treturn false;\n}\n\nbool User::is_Valid_Password(std::string p)\n{\n\tif(password == p)\n\t\treturn true;\n\treturn false;\n}\n\nvoid User::Login()\n{\n\tlogged_in = true;\n}\n\nvoid User::Logout()\n{\n\tlogged_in =false;\n}\n\nvoid User::Add_Post(UT_Post *post)\n{\t\n\tpost->id = std::to_string(num_of_posts_history +1);\n\tposts.push_back(post);\n\tSend_Notification(NOTIFICATION_1);\n\tnum_of_posts_history++;\n}\n\nvoid User::Connect(User *target)\n{\n\tfor(int i=0 ; i<connection_list.size() ; i++)\n\t{\n\t\tif(connection_list[i] == target)\n\t\t\tthrow AvailabilityException(ERROR_1);\n\t}\n\tconnection_list.push_back(target);\n}\n\nbool User::Permision_Check(std::string cmd)\n{\n\tfor(int i=0 ; i<valid_cmds.size(); i++)\n\t{\n\t\tif(cmd == valid_cmds[i])\n\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n\n\nstd::string User::get_Type()\n{\n\treturn user_type;\n}\n\nstd::string User::get_Major_Id()\n{\n\treturn major_id;\n}\n\nstd::string User::get_Name()\n{\n\treturn name;\n}\n\nvoid User::Sort_Posts()\n{\n\tUT_Post *temp;\n\tfor(int i=0 ; i<posts.size() ; i++)\n\t{\n\t\tfor(int j=0 ; j<posts.size() -1 ; j++)\n\t\t{\n\t\t\tif(posts[j]->id < posts[j+1]->id)\n\t\t\t{\n\t\t\t\ttemp = posts[j];\n\t\t\t\tposts[j] = posts[j+1];\n\t\t\t\tposts[j+1] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\n\nstd::string User::get_Post(std::string post_id)\n{\n\tstd::ostringstream S;\n\tUT_Post *post;\n\tbool id_validation = false;\n\n\tfor(int i=0 ; i<posts.size() ; i++)\n\t{\n\t\tif(posts[i]->id == post_id)\n\t\t{\n\t\t\tid_validation = true;\n\t\t\tpost = posts[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(!id_validation)\n\t\tthrow AvailabilityException(ERROR_2);\n\tS << this->get_Info();\n\tS << post->id << \" \" << post->title << \" \" << post->message << std::endl;\n\treturn S.str();\n}\n\nvoid User::Send_Notification(std::string notice_text)\n{\n\tNotification *new_notif = new Notification{id,name,notice_text};\n\tfor(int i=0 ; i<connection_list.size() ; i++)\n\t{\n\t\tconnection_list[i]->Recieve_Notification(new_notif);\n\t}\n}\n\nvoid User::Recieve_Notification(Notification* notif)\n{\n\tnotifications.push_back(notif);\n}\n\nstd::string User::get_Notifications()\n{\n\tstd::ostringstream S;\n\n\tif(notifications.size() == 0)\n\t\tthrow AvailabilityException(ERROR_4);\n\n\tfor(int i= notifications.size() - 1 ; i>=0 ; i--)\n\t{\n\t\tS << notifications[i]->user_id << \" \" << notifications[i]->name << \": \" << notifications[i]->notice << std::endl;\n\t}\n\t/*for(int i=0 ; i<notifications.size() ; i++)\n\t{\n\t\tdelete notifications[i];\n\t}*/\n\n\tdelete notifications[0];\n\t\tdelete notifications[1];\n\n\tnotifications.clear();\n\treturn S.str();\n}\n\nvoid User::Delete_Post(std::string post_id)\n{\n\tbool id_validation = false;\n\tfor(int i=0 ; i<posts.size() ; i++)\n\t{\n\t\tif(posts[i]->id == post_id)\n\t\t{\n\t\t\tid_validation = true;\n\t\t\tdelete posts[i];\n\t\t\tposts.erase(posts.begin() + i);\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(!id_validation)\n\t\tthrow AvailabilityException(ERROR_2);\n}\n\n\nstd::string User::get_Id()\n{\n\treturn id;\n}\n\nvoid User::Free_Allocated_Memory()\n{\n\n\tfor(int i=0 ; i<posts.size() ; i++)\n\t{\n\t\tdelete posts[i];\n\t}\n\n\t\tstd::cout << notifications.size()  << \"--------------------\"<< std::endl;\n\n\t/*(int j=0 ; j<notifications.size() ; j++)\n\t{\n\t\tstd::cout << \"i = \" << j << \"--------------------\"<< std::endl;\n\n\t\tdelete notifications[j];\n\t}*/\n}\t\n","filename":"/home/erfan/Desktop/Project6/A6_1/user.cpp","identifier":"Text Change","lineCount":213,"languageId":"cpp"},"failed":false}